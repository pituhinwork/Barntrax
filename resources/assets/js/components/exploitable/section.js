if (!('Exploitable' in App.Components)) {
    App.Components.Exploitable = {};
}

/**
 * Required data to work:
 * * models (array)
 * 
 * * deleter (optional)
 * * archiver (optional)
 * * unarchiver (optional)
 * * seller (optional)
 * * unseller (optional)
 * * transferer (optional)
 * * dier (optional)
 */
App.Components.Exploitable.Section = Vue.extend({
    data: function() {
        return {
            activeModel: {},
            hasArchive: true,
            modalUnique: null,
            soldValue: 0,
            transferTo: '',
            transferErrors: {}
        };
    },
    computed: {
        confirmTarget: function () {
            return this.activeModel.name;
        }
    },
    events: {
        formAdded: function(model) {
            this.models.push(model);
        },
        formUpdated: function(model) {
            var match = _.find(this.models, this.compareModels.bind(this, model));
            if (match) {
                _.extendOwn(match, model);
            } else {
                this.$trigger('formAdded', model);
            }
        },
        showArchiveModel: function(model) {
            this.activeModel = model;
            console.log(this.modalId('#archive-breed-modal'));
            console.log($(this.modalId('#archive-breed-modal'), this.$el));
            $(this.modalId('#archive-breed-modal'), this.$el).modal('show');
        },
        doArchiveModel: function() {
            $(this.modalId('#archive-breed-modal'), this.$el).modal('hide');
            this.archiver(this.activeModel).then(() => {
                this.excludeModel(this.activeModel);
                this.$emit('archivedModel', this.activeModel);
                this.$broadcast('archivedModel', this.activeModel);
                this.activeModel = {};
            });
        },
        
        showSoldModel: function(model) {
            this.activeModel = model;
            $(this.modalId('#sold-breed-modal'), this.$el).modal('show');
        },
        doSoldModel: function() {
            $(this.modalId('#sold-breed-modal'), this.$el).modal('hide');
            this.seller(this.activeModel, this.soldValue).then(() => {
                this.excludeModel(this.activeModel);
                this.$emit('soldModel', this.activeModel);
                this.$broadcast('soldModel', this.activeModel);
                this.soldValue = 0;
            });
            $(this.modalId('#transfer-breed-modal'), this.$el).modal('show');
        },

        doTransferModel: function() {
            $(this.modalId('#transfer-breed-modal'), this.$el).modal('hide');
            $(this.modalId('#confirm-transfer-breed-modal'), this.$el).modal('show');
        },
        
        doConfirmTransferModel: function () {
            this.transferer(this.activeModel, this.transferTo).then(
                () => {
                    $(this.modalId('#confirm-transfer-breed-modal'), this.$el).modal('hide');
                    this.excludeModel(this.activeModel);
                    this.$emit('transferModel', this.activeModel);
                    this.$broadcast('transferModel', this.activeModel);
                    this.activeModel = {};
                    this.transferTo = '';
                    this.transferErrors = {};
                },
                response => {
                    this.transferErrors = response.data;
                    this.unconfirmTransfer();
                }
            );
        },
        doUnconfirmTransferModel: function () {
            $(this.modalId('#confirm-transfer-breed-modal'), this.$el).modal('hide');
            $(this.modalId('#transfer-breed-modal'), this.$el).modal('show');
        },

        showUnsoldModel: function(model) {
            this.activeModel = model;
            $(this.modalId('#unsold-breed-modal'), this.$el).modal('show');
        },
        doUnsoldModel: function() {
            $(this.modalId('#unsold-breed-modal'), this.$el).modal('hide');
            this.unseller(this.activeModel).then(() => {
                this.excludeModel(this.activeModel);
                this.$emit('unsoldModel', this.activeModel);
                this.$broadcast('unsoldModel', this.activeModel);
                this.activeModel = {};
            });
        },

        showUnarchiveModel: function(model) {
            this.activeModel = model;
            $(this.modalId('#unarchive-breed-modal'), this.$el).modal('show');
        },
        doUnarchiveModel: function() {
            $(this.modalId('#unarchive-breed-modal'), this.$el).modal('hide');
            this.unarchiver(this.activeModel).then(() => {
                this.excludeModel(this.activeModel);
                this.$emit('unarchivedModel', this.activeModel);
                this.$broadcast('unarchivedModel', this.activeModel);
                this.activeModel = {};
            });
        },

        showDeleteModel: function(model) {
            this.activeModel = model;
            if (this.hasArchive) {
                $(this.modalId('#delete-breed-modal'), this.$el).modal('show');
            } else {
                $(this.modalId('#delete-pure-modal'), this.$el).modal('show');
            }
        },
        doDeleteModel: function() {
            this.deleter(this.activeModel).then(() => {
                $(this.modalId('#delete-breed-modal') + ', '
                    + this.modalId('#delete-pure-modal'), this.$el).modal('hide');
                this.excludeModel(this.activeModel);
                this.$emit('deletedModel', this.activeModel);
                this.$broadcast('deletedModel', this.activeModel);
                this.activeModel = {};
            });
        },
        
        showDiedModel: function(model) {
            this.activeModel = model;
            $(this.modalId('#died-modal'), this.$el).modal('show');
        },
        doDiedModel: function() {
            this.dier(this.activeModel).then(() => {
                $(this.modalId('#died-modal'), this.$el).modal('hide');
                this.excludeModel(this.activeModel);
                this.$emit('diedModel', this.activeModel);
                this.$broadcast('diedModel', this.activeModel);
                this.activeModel = {};
            });
        }
    },
    methods: {
        modalId: function(modalId) {
            var res = this.modalUnique ? modalId + '-' + this.modalUnique : modalId;
            console.log(res);
            return res;
        },
        compareModels: function(model1, model2) {
            // this is a default implementation, please fill free to override it as neede
            return model1.id == model2.id;
        },
        editModel: function(model) {
            this.$emit('editModel', model);
            this.$broadcast('editModel', model);
        },
        excludeModel: function(model) {
            var index = _.findIndex(this.models, this.compareModels.bind(this, model));
            if (index !== -1) {
                this.models.splice(index, 1);
            }
        },
        addModel: function() {
            this.$emit('addModel');
            this.$broadcast('addModel');
        },
        showArchive: function(model) {
            this.$emit('showArchiveModel', model);
        },
        showSold: function(model) {
            this.$emit('showSoldModel', model);
        },
        sold: function() {
            this.$emit('doSoldModel');
        },
        transfer: function() {
            this.$emit('doTransferModel');
        },
        confirmTransfer: function() {
            this.$emit('doConfirmTransferModel');
        },
        unconfirmTransfer: function() {
            this.$emit('doUnconfirmTransferModel');
        },
        showUnsold: function(model) {
            this.$emit('showUnsoldModel', model);
        },
        unsold: function(model) {
            this.$emit('doUnsoldModel');
        },
        archive: function() {
            this.$emit('doArchiveModel');
        },
        showUnarchive: function(model) {
            this.$emit('showUnarchiveModel', model);
        },
        unarchive: function() {
            this.$emit('doUnarchiveModel');
        },
        showDelete: function(model) {
            this.$emit('showDeleteModel', model);
        },
        delete: function() {
            this.$emit('doDeleteModel');
        },
        showDied: function(model) {
            this.$emit('showDiedModel', model);
        },
        died: function() {
            this.$emit('doDiedModel');
        },
        missed: function() {
            this.$emit('doMissedModel');
        }
    }
});
